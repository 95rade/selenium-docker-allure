pipeline
        {
//            agent
//            {
//                dockerfile
//                {
//                    filename "selenium-base-image/Dockerfile"
//                    args "-u root -v /var/run/docker.sock:/var/run/docker.sock"
//                }
//            }
            parameters
            {
                choice(name: 'DRIVER', description: 'Choose browser', choices: 'chrome\nfirefox\nheadless')
                string(name: 'TESTS_TO_RUN', defaultValue: 'tests/test_purchase_tickets.py', description: 'choose test to run')
            }

            options
            {
                buildDiscarder(logRotator(numToKeepStr: '100'))
                timestamps()
            }
            agent any
            stages
            {
                stage('SCM: code update')
                {
                    steps
                    {
                        checkout([
                                $class: 'GitSCM', branches: [[name: 'master']],
                                userRemoteConfigs: [[url: 'https://github.com/eliranshani/selenium-docker-allure.git']]
                        ])

                        // Allure report
                        sh "mkdir -p ./blazedemo_app/allure-results"
                        sh "rm -rf ./blazedemo_app/allure-results/*"
                        sh "chown jenkins:jenkins ./blazedemo_app/allure-results"
                    }
                }
                stage('Docker build')
                {
                    steps
                    {
                        script
                        {
                            sh "cp selenium-base-image/Dockerfile ."
                            docker.build("blazemeter/selenium_base")
                            sh "cp selenium-automation-run/Dockerfile ."
                            docker.build("blazemeter/selenium_image")
                        }
                    }
                }
                stage('Run test')
                {
                    steps
                    {
                        script
                        {
                            try
                            {
                                def now = new Date()
                                tstamp = now.format("yyyyMMdd-HH:mm:ss.SSSS", TimeZone.getTimeZone('UTC'))

                                sh "docker run " +
                                        "--privileged " +
                                        "--shm-size=1g " +                                                                  // shared memory size is set to 1G to prevent chromedriver memory leak
                                        "--rm " +                                                                           // remove container at the end of the session
                                        "-e PYTHONPATH=/code/ " +                                                           // environment variable support
                                        "-w=/code " +                                                                       // setting working directory
                                        "-v `pwd`/blazedemo_app:/code " +                                                   // mount git repository to the container
                                        "blazemeter/selenium_image:latest " +                                               // the specific image that being used (latest image by default)
                                        "-v"                                                                                // verbose (for debugging purpose)
                            }
                            catch (error)
                            {
                            }
                        }
                    }
                }
            }
            post
            {
                always
                {
                    try
                    {
                        allure(commandline: '2.5.0', includeProperties: false, jdk: '', properties: [[key: 'allure.tests.management.pattern', value: 'http://tms.company.com/%s']], results: [[path: 'blazedemo_app/allure-results']])
                    }
                    catch (error)
                    {
                        echo error.message
                    }
                }
            }
        }